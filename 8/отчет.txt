Концепция:
Процессы циклически шифруют строку по 2 символа и пишут результат в разделенную память.

Семафоры:
sem_print - мьютекс для вывода в консоль;
sem_part - семафор показывающий какую часть строки необходимо обрабатывать процессу;
sem_proc - семафор показывающий сколько процессов живо.
sem_last_proc - семафор, значение которого равно PID последнего запущенного процесса.

Память:
memory - разделяемая память хранящая результат

Важные переменные:
last_proc - PID процесса, которому необходимо отправить SIGINT при внештатной ситуации (предшествующий процесс).

Порядок действий:
1. Читает строку из файла в буфер размеров 6000;
2. Создает / открывает семафоры и память;
3. Получает last_proc из sem_last_proc. Значение семафора устанавливает в свой PID;
4. Увеличивает sem_proc на 1;
------------
В ЦИКЛЕ:
5. Получает значение sem_part. Если оно выходит за рамки входной строки, то завершает работу;
6. Увеличивает sem_part;
7. Записывает в разделяемую память 2 зашифрованных символа;
8. Блокирует мьютекс sem_print. Выводит промежуточный результат строки в консоль. Освобождает sem_print.
------------

При внештатном завершении отправляет SIGINT процессу с PID = last_proc. Тот процесс отправляет своему last_proc - и так по цепочке. Самый первый процесс (с last_proc = -1) отправляет последнему процессу. Последний оставшийся процесс чистит файлы.